{:use-macros {if-not taoensso.encore, have taoensso.encore, is cljs.test, compile-if taoensso.encore, have! taoensso.encore, when-lets taoensso.encore, name-with-attrs taoensso.encore, -vol! taoensso.encore, -vol-reset! taoensso.encore, have? taoensso.encore, if-lets taoensso.encore, cond taoensso.encore, catch-errors* taoensso.encore, catch-errors taoensso.encore, -vol-swap! taoensso.encore}, :excludes #{qualified-keyword? boolean? some? simple-symbol? if-not float? format uri? int? indexed? simple-keyword? neg-int? run! defonce bytes? ident? qualified-ident? cond nat-int? pos-int? simple-ident? qualified-symbol?}, :name taoensso.encore, :imports nil, :requires {goog.net.XhrIoPool goog.net.XhrIoPool, gevents goog.events, set clojure.set, test cljs.test, cljs.tools.reader.edn cljs.tools.reader.edn, taoensso.truss taoensso.truss, goog.net.XhrIo goog.net.XhrIo, gquery-data goog.Uri.QueryData, goog.string goog.string, goog.Uri.QueryData goog.Uri.QueryData, gobj goog.object, cljs.test cljs.test, goog.object goog.object, gxhr-pool goog.net.XhrIoPool, goog.string.StringBuffer goog.string.StringBuffer, truss taoensso.truss, goog.net.EventType goog.net.EventType, clojure.set clojure.set, goog.structs goog.structs, goog.string.format goog.string.format, gstructs goog.structs, str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, gstr goog.string, edn cljs.tools.reader.edn, goog.events goog.events, goog.net.ErrorCode goog.net.ErrorCode, gxhr goog.net.XhrIo}, :uses nil, :defs {encore-version {:name taoensso.encore/encore-version, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 106, :column 1, :end-line 106, :end-column 32, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 106, :column 18, :end-line 106, :end-column 32}}, as-?nat-int {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 607, :column 7, :end-line 607, :end-column 18, :arglists (quote ([x]))}, :name taoensso.encore/as-?nat-int, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 607, :end-line 607, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, memoize-a1_ {:name taoensso.encore/memoize-a1_, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2850, :column 3, :end-line 2850, :end-column 19, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2850, :column 8, :end-line 2850, :end-column 19}}, removev {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2989, :column 9, :end-line 2989, :end-column 16, :arglists (quote ([pred coll]))}, :name taoensso.encore/removev, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2989, :end-line 2989, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, as-nzero {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 644, :column 7, :end-line 644, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/as-nzero, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 644, :end-line 644, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, nneg-int? {:name taoensso.encore/nneg-int?, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2857, :column 3, :end-line 2857, :end-column 17, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2857, :column 8, :end-line 2857, :end-column 17}}, error? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 457, :column 23, :end-line 457, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/error?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 457, :ret-tag boolean, :end-line 457, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ->?singleton {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 915, :column 7, :end-line 915, :end-column 19, :arglists (quote ([coll]))}, :name taoensso.encore/->?singleton, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 19, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 915, :end-line 915, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, set* {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 902, :column 7, :end-line 902, :end-column 11, :arglists (quote ([x]))}, :name taoensso.encore/set*, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 902, :end-line 902, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, sayp {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2448, :column 9, :end-line 2448, :end-column 13, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.encore/sayp, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2448, :end-line 2448, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, now-udt {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 856, :column 11, :end-line 856, :end-column 18, :arglists (quote ([]))}, :name taoensso.encore/now-udt, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 856, :end-line 856, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, qualified-keyword? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 467, :column 18, :end-line 467, :end-column 36, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/qualified-keyword?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 36, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 467, :ret-tag boolean, :end-line 467, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-?kw {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 579, :column 7, :end-line 579, :end-column 13, :arglists (quote ([x]))}, :name taoensso.encore/as-?kw, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, reduce-kvs {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 966, :column 9, :end-line 966, :end-column 19, :arglists (quote ([rf init kvs])), :doc "Like `reduce-kv` but takes a flat sequence of kv pairs"}, :name taoensso.encore/reduce-kvs, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 19, :method-params ([rf init kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 966, :end-line 966, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rf init kvs])), :doc "Like `reduce-kv` but takes a flat sequence of kv pairs"}, url-decode {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2690, :column 7, :end-line 2690, :end-column 17, :arglists (quote ([s & [encoding]])), :doc "Stolen from http://goo.gl/99NSR1", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}}, :name taoensso.encore/url-decode, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [encoding])], :arglists ([s & [encoding]]), :arglists-meta (nil)}, :method-params [(s [encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2690, :end-line 2690, :max-fixed-arity 1, :fn-var true, :arglists ([s & [encoding]]), :doc "Stolen from http://goo.gl/99NSR1"}, -swap-cache! {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1307, :column 8, :end-line 1307, :end-column 20, :private true, :arglists (quote ([atom_ k f])), :doc "Used by memoization utils"}, :private true, :name taoensso.encore/-swap-cache!, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 20, :method-params ([atom_ k f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1307, :end-line 1307, :max-fixed-arity 3, :fn-var true, :arglists (quote ([atom_ k f])), :doc "Used by memoization utils"}, str-builder? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1481, :column 23, :end-line 1481, :end-column 35, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/str-builder?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 35, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 1481, :ret-tag boolean, :end-line 1481, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, every {:name taoensso.encore/every, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2871, :column 3, :end-line 2871, :end-column 13, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2871, :column 8, :end-line 2871, :end-column 13}}, parse-query-params {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2721, :column 7, :end-line 2721, :end-column 25, :arglists (quote ([s & [keywordize? encoding]])), :doc "Based on `ring-codec/form-decode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [keywordize? encoding])], :arglists ([s & [keywordize? encoding]]), :arglists-meta (nil)}}, :name taoensso.encore/parse-query-params, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [keywordize? encoding])], :arglists ([s & [keywordize? encoding]]), :arglists-meta (nil)}, :method-params [(s [keywordize? encoding])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 2721, :end-line 2721, :max-fixed-arity 1, :fn-var true, :arglists ([s & [keywordize? encoding]]), :doc "Based on `ring-codec/form-decode`"}, dissoc-in {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1163, :column 7, :end-line 1163, :end-column 16, :arglists (quote ([m ks dissoc-k] [m ks dissoc-k & more])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m ks dissoc-k]), :arglists ([m ks dissoc-k] [m ks dissoc-k & more]), :arglists-meta (nil nil)}}, :name taoensso.encore/dissoc-in, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([m ks dissoc-k]), :arglists ([m ks dissoc-k] [m ks dissoc-k & more]), :arglists-meta (nil nil)}, :method-params ([m ks dissoc-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1163, :end-line 1163, :max-fixed-arity 3, :fn-var true, :arglists ([m ks dissoc-k] [m ks dissoc-k & more])}, norm-word-breaks {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1744, :column 7, :end-line 1744, :end-column 23, :arglists (quote ([s])), :doc "Converts all word breaks of any form and length (including line breaks of any\n  form, tabs, spaces, etc.) to a single regular space"}, :name taoensso.encore/norm-word-breaks, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1744, :end-line 1744, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts all word breaks of any form and length (including line breaks of any\n  form, tabs, spaces, etc.) to a single regular space"}, rcompare {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1248, :column 14, :end-line 1248, :end-column 22, :arglists (quote ([x y])), :doc "Reverse comparator"}, :name taoensso.encore/rcompare, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 22, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 8, :line 1248, :end-line 1248, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :doc "Reverse comparator"}, Swapped {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name taoensso.encore/Swapped, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 19, :type true, :column 12, :internal-ctor true, :line 1318, :record true, :end-line 1318, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, merge-meta {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 735, :column 7, :end-line 735, :end-column 17, :arglists (quote ([x m]))}, :name taoensso.encore/merge-meta, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :method-params ([x m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 735, :end-line 735, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x m]))}, ms {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 860, :column 7, :end-line 860, :end-column 9, :arglists (quote ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}])), :doc "Returns ~number of milliseconds in period defined by given args", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :arglists-meta (nil)}}, :name taoensso.encore/ms, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :arglists-meta (nil)}, :method-params [({:as opts, :keys [years months weeks days hours mins secs msecs ms]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 860, :end-line 860, :max-fixed-arity 0, :fn-var true, :arglists ([& {:as opts, :keys [years months weeks days hours mins secs msecs ms]}]), :doc "Returns ~number of milliseconds in period defined by given args"}, str-ends-with? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1596, :column 7, :end-line 1596, :end-column 21, :arglists (quote ([s substr]))}, :name taoensso.encore/str-ends-with?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 21, :method-params ([s substr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1596, :end-line 1596, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s substr]))}, nested-merge {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1277, :column 7, :end-line 1277, :end-column 19, :arglists (quote ([& maps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name taoensso.encore/nested-merge, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1277, :end-line 1277, :max-fixed-arity 0, :fn-var true, :arglists ([& maps])}, rate-limited {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2901, :column 9, :end-line 2901, :end-column 21, :arglists (quote ([ncalls-limit window-ms f]))}, :name taoensso.encore/rate-limited, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 21, :method-params ([ncalls-limit window-ms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2901, :end-line 2901, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ncalls-limit window-ms f]))}, format-query-string {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2698, :column 7, :end-line 2698, :end-column 26, :arglists (quote ([m]))}, :name taoensso.encore/format-query-string, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 26, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2698, :end-line 2698, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, is! {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 628, :column 7, :end-line 628, :end-column 10, :arglists (quote ([x] [pred x] [pred x fail-?data])), :doc "Cheaper `have!` that provides less diagnostic info", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [pred x] [pred x fail-?data]), :arglists ([x] [pred x] [pred x fail-?data]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/is!, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([x] [pred x] [pred x fail-?data]), :arglists ([x] [pred x] [pred x fail-?data]), :arglists-meta (nil nil nil)}, :method-params ([x] [pred x] [pred x fail-?data]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 628, :end-line 628, :max-fixed-arity 3, :fn-var true, :arglists ([x] [pred x] [pred x fail-?data]), :doc "Cheaper `have!` that provides less diagnostic info"}, ?substr<idx {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1618, :column 7, :end-line 1618, :end-column 18, :arglists (quote ([s start] [s start end])), :doc "Like `subs` but provides consistent clj/s behaviour:\n    - Never throws; snaps to valid start and end indexes.\n    - Returns nil rather than an empty string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}}, :name taoensso.encore/?substr<idx, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s start] [s start end]), :arglists ([s start] [s start end]), :arglists-meta (nil nil)}, :method-params ([s start] [s start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1618, :end-line 1618, :max-fixed-arity 3, :fn-var true, :arglists ([s start] [s start end]), :doc "Like `subs` but provides consistent clj/s behaviour:\n    - Never throws; snaps to valid start and end indexes.\n    - Returns nil rather than an empty string."}, log {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2445, :column 9, :end-line 2445, :end-column 12, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name taoensso.encore/log, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2445, :end-line 2445, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, nano-time {:name taoensso.encore/nano-time, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2368, :column 1, :end-line 2368, :end-column 15, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2368, :column 6, :end-line 2368, :end-column 15}}, clamp {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 793, :column 7, :end-line 793, :end-column 12, :arglists (quote ([nmin nmax n]))}, :name taoensso.encore/clamp, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 12, :method-params ([nmin nmax n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 793, :end-line 793, :max-fixed-arity 3, :fn-var true, :arglists (quote ([nmin nmax n]))}, memoized {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2992, :column 9, :end-line 2992, :end-column 17, :arglists (quote ([cache f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cache f args)], :arglists ([cache f & args]), :arglists-meta (nil)}}, :name taoensso.encore/memoized, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(cache f args)], :arglists ([cache f & args]), :arglists-meta (nil)}, :method-params [(cache f args)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2992, :end-line 2992, :max-fixed-arity 2, :fn-var true, :arglists ([cache f & args])}, uint? {:name taoensso.encore/uint?, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2859, :column 3, :end-line 2859, :end-column 13, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2859, :column 8, :end-line 2859, :end-column 13}}, as-pfloat {:name taoensso.encore/as-pfloat, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2869, :column 3, :end-line 2869, :end-column 17, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2869, :column 8, :end-line 2869, :end-column 17}}, log? {:name taoensso.encore/log?, :file "resources/public/js/dev/main/taoensso/encore.cljs", :line 2919, :column 5, :end-line 2919, :end-column 24, :private true, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2919, :column 20, :end-line 2919, :end-column 24, :private true}}, greatest {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2931, :column 9, :end-line 2931, :end-column 17, :arglists (quote ([coll & [?comparator]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}}, :name taoensso.encore/greatest, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll [?comparator])], :arglists ([coll & [?comparator]]), :arglists-meta (nil)}, :method-params [(coll [?comparator])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2931, :end-line 2931, :max-fixed-arity 1, :fn-var true, :arglists ([coll & [?comparator]])}, -as-throw {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 640, :column 7, :end-line 640, :end-column 16, :arglists (quote ([as-name x]))}, :name taoensso.encore/-as-throw, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 16, :method-params ([as-name x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 640, :end-line 640, :max-fixed-arity 2, :fn-var true, :arglists (quote ([as-name x]))}, str-join {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1515, :column 9, :end-line 1515, :end-column 17, :arglists (quote ([coll] [separator coll] [separator xform coll])), :doc "Faster, transducer-based generalization of `clojure.string/join` with `xform`\n    support", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll] [separator coll] [separator xform coll]), :arglists ([coll] [separator coll] [separator xform coll]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/str-join, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([coll] [separator coll] [separator xform coll]), :arglists ([coll] [separator coll] [separator xform coll]), :arglists-meta (nil nil nil)}, :method-params ([coll] [separator coll] [separator xform coll]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 3, :line 1515, :end-line 1515, :max-fixed-arity 3, :fn-var true, :arglists ([coll] [separator coll] [separator xform coll]), :doc "Faster, transducer-based generalization of `clojure.string/join` with `xform`\n    support"}, merge-keywords {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 689, :column 7, :end-line 689, :end-column 21, :arglists (quote ([ks] [ks no-slash?])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks] [ks no-slash?]), :arglists ([ks] [ks no-slash?]), :arglists-meta (nil nil)}}, :name taoensso.encore/merge-keywords, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks] [ks no-slash?]), :arglists ([ks] [ks no-slash?]), :arglists-meta (nil nil)}, :method-params ([ks] [ks no-slash?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 689, :end-line 689, :max-fixed-arity 2, :fn-var true, :arglists ([ks] [ks no-slash?])}, boolean? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 449, :column 18, :end-line 449, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/boolean?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 449, :ret-tag boolean, :end-line 449, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, queue* {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1192, :column 7, :end-line 1192, :end-column 13, :arglists (quote ([& items])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(items)], :arglists ([& items]), :arglists-meta (nil)}}, :name taoensso.encore/queue*, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(items)], :arglists ([& items]), :arglists-meta (nil)}, :method-params [(items)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1192, :end-line 1192, :max-fixed-arity 0, :fn-var true, :arglists ([& items])}, atom? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 458, :column 24, :end-line 458, :end-column 29, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/atom?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 29, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 458, :ret-tag boolean, :end-line 458, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, chan? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 553, :column 25, :end-line 553, :end-column 30, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/chan?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 553, :ret-tag boolean, :end-line 553, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, keywordize-map {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2988, :column 9, :end-line 2988, :end-column 23, :arglists (quote ([m]))}, :name taoensso.encore/keywordize-map, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 23, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 2988, :end-line 2988, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, subvec* {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 3028, :column 9, :end-line 3028, :end-column 16, :arglists (quote ([v start-idx & [?max-len]])), :doc "Deprecated, prefer `?subvec<idx` or `?subvec<len`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(v start-idx [?max-len])], :arglists ([v start-idx & [?max-len]]), :arglists-meta (nil)}}, :name taoensso.encore/subvec*, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(v start-idx [?max-len])], :arglists ([v start-idx & [?max-len]]), :arglists-meta (nil)}, :method-params [(v start-idx [?max-len])], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 3028, :end-line 3028, :max-fixed-arity 2, :fn-var true, :arglists ([v start-idx & [?max-len]]), :doc "Deprecated, prefer `?subvec<idx` or `?subvec<len`"}, logf {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2447, :column 9, :end-line 2447, :end-column 13, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/logf, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 3, :line 2447, :end-line 2447, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, reportf {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2929, :column 11, :end-line 2929, :end-column 18, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/reportf, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 2929, :end-line 2929, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, regular-num? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 513, :column 18, :end-line 513, :end-column 30, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/regular-num?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 30, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 513, :ret-tag boolean, :end-line 513, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, some? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 446, :column 18, :end-line 446, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/some?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 446, :ret-tag boolean, :end-line 446, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, str-?index {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 1603, :column 7, :end-line 1603, :end-column 17, :arglists (quote ([s substr] [s substr start-idx] [s substr start-idx last?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists-meta (nil nil nil)}}, :name taoensso.encore/str-?index, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists ([s substr] [s substr start-idx] [s substr start-idx last?]), :arglists-meta (nil nil nil)}, :method-params ([s substr] [s substr start-idx] [s substr start-idx last?]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1603, :end-line 1603, :max-fixed-arity 4, :fn-var true, :arglists ([s substr] [s substr start-idx] [s substr start-idx last?])}, as-?name {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 580, :column 7, :end-line 580, :end-column 15, :arglists (quote ([x]))}, :name taoensso.encore/as-?name, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 580, :end-line 580, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, udt? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 545, :column 18, :end-line 545, :end-column 22, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/udt?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 545, :ret-tag boolean, :end-line 545, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, as-kw {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 647, :column 7, :end-line 647, :end-column 12, :arglists (quote ([x]))}, :name taoensso.encore/as-kw, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, fatalf {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 2928, :column 11, :end-line 2928, :end-column 17, :arglists (quote ([fmt & xs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}}, :name taoensso.encore/fatalf, :variadic true, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt xs)], :arglists ([fmt & xs]), :arglists-meta (nil)}, :method-params [(fmt xs)], :protocol-impl nil, :arglists-meta (nil), :column 5, :line 2928, :end-line 2928, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & xs])}, neg-num? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 535, :column 18, :end-line 535, :end-column 26, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/neg-num?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 26, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 535, :ret-tag boolean, :end-line 535, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, distinct-elements? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 904, :column 7, :end-line 904, :end-column 25, :arglists (quote ([x]))}, :name taoensso.encore/distinct-elements?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 904, :end-line 904, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, nneg? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/resources/public/js/dev/main/taoensso/encore.cljs", :line 511, :column 18, :end-line 511, :end-column 23, :tag boolean, :arglists (quote ([x]))}, :name taoensso.encore/nneg?, :variadic false, :file "resources/public/js/dev/main/taoensso/encore.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 3, :line 511, :ret-tag boolean, :end-line 511, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, ...}, :require-macros {enc-macros taoensso.encore, taoensso.encore taoensso.encore, test cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:tick :args new-val :max-len :taoensso.encore/dynamic :nblank :?ratio :min :email :report :nat-float :mem/all :get :backoff-ms :merge/dissoc :hash :rl/reset :ev :rl/peek :?content :else :int :keywordize :err-type :reset :protocol :pval :unknown :rl/all :method :default :pathname :float :xhr-pool-depleted :warn :msecs :name :trace :qualifier :swap/dissoc :readers :secs :loaded :mem/del :months :params :days :type :pos-float :mins do :debug :err-cause :hostname :qname :search :abort :udt :kw :fail-?data ...}, :order [:version :min-version :your-version :doc :readers :taoensso.encore/dynamic :default :arg :type :err-type :err-msg :err-cause :else :arg-val :arg-type :fail-?data :nzero :nblank :nempty-str :kw :name :qname :email :nemail :udt :int :nat-int :pos-int :float :nat-float :pos-float :pval :bool :qualifier :round :min :max :factor :years :months :weeks :days :hours :mins :secs :msecs :ms :merge/dissoc :new-val :return-val new-val return-val :swap/dissoc :swap :reset :mem/del :mem/all :mem/fresh :tick :rl/debug ...]}, :doc "Core utils library for Clojure/Script.\n\n  A personal collection of low-level tools for Clojure/Script that\n  emphasizes:\n    * Cross platform API compatibility\n    * Flexibility\n    * Performance\n    * Backwards compatibility\n\n  This lib's mostly for my own use and for advanced users that feel\n  comfortable reading this source. Not providing much beginner-oriented\n  documentation for this, sorry.\n\n  Quick Taoensso naming conventions:\n    **foo** - Dynamic var.\n    foo!    - Fn with side effects, or that should otherwise be used cautiously.\n    foo?    - Truthy val or fn that returns truthy val.\n    foo!?   - Fn that has side effetcs (or requires caution) and that returns\n              a truthy val. Note: !?, not ?!.\n    foo$    - Fn that's notably expensive to compute (e.g. hits db).\n    foo_    - Dereffable val (e.g. atom, volatile, delay, etc.).\n    _       - Unnamed val.\n    _foo    - Named but unused val.\n    ?foo    - Optional val (emphasize that val may be nil).\n    foo*    - A variation of `foo` (e.g. `foo*` macro vs `foo` fn).\n    -foo    - Public implementation detail or intermediate (e.g. uncoerced) val.\n    >foo    - Val \"to foo\" (e.g. >sender, >host), or fn to put/coerce/transform.\n    <foo    - Val \"from foo\" (e.g. <sender, <host), or fn to take/coerce/transform.\n    ->foo   - Fn to put/coerce/transform."}