{:use-macros nil, :excludes #{}, :name spectra_cljs.state, :imports nil, :requires {r reagent.core, reagent.core reagent.core, s spectra_cljc.schema, spectra_cljc.schema spectra_cljc.schema}, :uses nil, :defs {a {:name spectra_cljs.state/a, :file "src/spectra_cljs/state.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 5, :column 10, :end-line 5, :end-column 11}}, look {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 32, :column 7, :end-line 32, :end-column 11, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name spectra_cljs.state/look, :variadic true, :file "src/spectra_cljs/state.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, person-pos {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([]))}, :name spectra_cljs.state/person-pos, :variadic false, :file "src/spectra_cljs/state.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, email-pos {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([]))}, :name spectra_cljs.state/email-pos, :variadic false, :file "src/spectra_cljs/state.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, email-person-pos {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 43, :column 7, :end-line 43, :end-column 23, :arglists (quote ([link-type]))}, :name spectra_cljs.state/email-person-pos, :variadic false, :file "src/spectra_cljs/state.cljs", :end-column 23, :method-params ([link-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([link-type]))}, update! {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 47, :column 7, :end-line 47, :end-column 14, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name spectra_cljs.state/update!, :variadic true, :file "src/spectra_cljs/state.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, set! {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/state.cljs", :line 50, :column 7, :end-line 50, :end-column 11, :arglists (quote ([loc val]))}, :name spectra_cljs.state/set!, :variadic false, :file "src/spectra_cljs/state.cljs", :end-column 11, :method-params ([loc val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc val]))}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:email :new-entity :email-rows :change-pwd :ajax-chan :map-center :updated :clicked :cal-events :map-zoom :map-markers :username :start :type :prop-filters :counters :search :window :input-meta :title :rank-lists :map-obj :loading :page-lengths :tabid :current-node :people-rows :new-entity-msg :end :search-results :people :user :attr-list :delete-account :objs :data}, :order [:new-entity :email-rows :change-pwd :ajax-chan :map-center :cal-events :map-zoom :map-markers :prop-filters :counters :search :input-meta :rank-lists :map-obj :loading :page-lengths :tabid :current-node :people-rows :new-entity-msg :search-results :user :delete-account :title :start :end :data :objs :updated :window :clicked :people :email :type :attr-list :username]}, :doc nil}