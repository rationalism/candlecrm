{:use-macros nil, :excludes #{}, :name spectra_cljs.node, :imports nil, :requires {u spectra_cljs.update, spectra_cljs.state spectra_cljs.state, table spectra_cljs.table, spectra_cljs.update spectra_cljs.update, spectra_cljc.schema spectra_cljc.schema, util spectra_cljs.util, state spectra_cljs.state, s spectra_cljc.schema, spectra_cljs.util spectra_cljs.util, str clojure.string, clojure.string clojure.string, spectra_cljs.regex spectra_cljs.regex, spectra_cljs.table spectra_cljs.table, regex spectra_cljs.regex}, :uses nil, :defs {add-newlines {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 79, :column 7, :end-line 79, :end-column 19, :arglists (quote ([piece]))}, :name spectra_cljs.node/add-newlines, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 19, :method-params ([piece]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([piece]))}, type-name {:name spectra_cljs.node/type-name, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 173, :column 1, :end-line 173, :end-column 15, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 173, :column 6, :end-line 173, :end-column 15}}, string-item {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 132, :column 7, :end-line 132, :end-column 18, :arglists (quote ([item prop]))}, :name spectra_cljs.node/string-item, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 18, :method-params ([item prop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item prop]))}, filtered-list {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 156, :column 7, :end-line 156, :end-column 20, :arglists (quote ([attr item]))}, :name spectra_cljs.node/filtered-list, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 20, :method-params ([attr item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attr item]))}, delete-entity-switch {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 59, :column 7, :end-line 59, :end-column 27, :arglists (quote ([]))}, :name spectra_cljs.node/delete-entity-switch, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, split-coll {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([strs break]))}, :name spectra_cljs.node/split-coll, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 17, :method-params ([strs break]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([strs break]))}, info-items {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 162, :column 7, :end-line 162, :end-column 17, :arglists (quote ([attrs item]))}, :name spectra_cljs.node/info-items, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 17, :method-params ([attrs item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attrs item]))}, node-aux {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 177, :column 7, :end-line 177, :end-column 15, :arglists (quote ([node-name item]))}, :name spectra_cljs.node/node-aux, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([node-name item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node-name item]))}, split-regex {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 35, :column 7, :end-line 35, :end-column 18, :arglists (quote ([s break]))}, :name spectra_cljs.node/split-regex, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 18, :method-params ([s break]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s break]))}, ask-more {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 113, :column 7, :end-line 113, :end-column 15, :arglists (quote ([attr]))}, :name spectra_cljs.node/ask-more, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr]))}, see-more {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 105, :column 7, :end-line 105, :end-column 15, :arglists (quote ([attr]))}, :name spectra_cljs.node/see-more, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr]))}, show-node {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 188, :column 7, :end-line 188, :end-column 16, :arglists (quote ([node-name item aux?]))}, :name spectra_cljs.node/show-node, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 16, :method-params ([node-name item aux?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node-name item aux?]))}, last-append {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 91, :column 7, :end-line 91, :end-column 18, :arglists (quote ([is-last text]))}, :name spectra_cljs.node/last-append, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 18, :method-params ([is-last text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([is-last text]))}, is-last? {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 88, :column 7, :end-line 88, :end-column 15, :arglists (quote ([item members]))}, :name spectra_cljs.node/is-last?, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([item members]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item members]))}, map-link {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 119, :column 7, :end-line 119, :end-column 15, :arglists (quote ([item]))}, :name spectra_cljs.node/map-link, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, see-all {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 109, :column 7, :end-line 109, :end-column 14, :arglists (quote ([attr]))}, :name spectra_cljs.node/see-all, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 14, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr]))}, insert-breaks {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 38, :column 7, :end-line 38, :end-column 20, :arglists (quote ([strs break]))}, :name spectra_cljs.node/insert-breaks, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 20, :method-params ([strs break]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([strs break]))}, edit-entity-switch {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 54, :column 7, :end-line 54, :end-column 25, :arglists (quote ([type]))}, :name spectra_cljs.node/edit-entity-switch, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 25, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type]))}, get-filter-limit {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 150, :column 7, :end-line 150, :end-column 23, :arglists (quote ([attr]))}, :name spectra_cljs.node/get-filter-limit, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 23, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr]))}, display-fields {:name spectra_cljs.node/display-fields, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 10, :column 1, :end-line 10, :end-column 20, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 10, :column 6, :end-line 10, :end-column 20}}, link-items {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 74, :column 7, :end-line 74, :end-column 17, :arglists (quote ([item]))}, :name spectra_cljs.node/link-items, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 17, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, ids-if-coll {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([type m]))}, :name spectra_cljs.node/ids-if-coll, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 18, :method-params ([type m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type m]))}, swap-item {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 70, :column 7, :end-line 70, :end-column 16, :arglists (quote ([item parsed]))}, :name spectra_cljs.node/swap-item, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 16, :method-params ([item parsed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item parsed]))}, split-many {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([s breaks]))}, :name spectra_cljs.node/split-many, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 17, :method-params ([s breaks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s breaks]))}, body-links {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 99, :column 7, :end-line 99, :end-column 17, :arglists (quote ([item]))}, :name spectra_cljs.node/body-links, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 17, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, display-item {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 126, :column 7, :end-line 126, :end-column 19, :arglists (quote ([is-last item]))}, :name spectra_cljs.node/display-item, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 19, :method-params ([is-last item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([is-last item]))}, get-title {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 27, :column 7, :end-line 27, :end-column 16, :arglists (quote ([node]))}, :name spectra_cljs.node/get-title, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 16, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, title-field {:name spectra_cljs.node/title-field, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 20, :column 6, :end-line 20, :end-column 17}}, str-item {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 146, :column 7, :end-line 146, :end-column 15, :arglists (quote ([n k v]))}, :name spectra_cljs.node/str-item, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 15, :method-params ([n k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 3, :fn-var true, :arglists (quote ([n k v]))}, text-keys {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 66, :column 7, :end-line 66, :end-column 16, :arglists (quote ([parsed]))}, :name spectra_cljs.node/text-keys, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 16, :method-params ([parsed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parsed]))}, body-link {:protocol-inline nil, :meta {:file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :line 94, :column 7, :end-line 94, :end-column 16, :arglists (quote ([piece]))}, :name spectra_cljs.node/body-link, :variadic false, :file "/home/alyssa/clojure/spectra/src/spectra_cljs/node.cljs", :end-column 16, :method-params ([piece]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([piece]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:p#email-body :div.infoitem :key :h3.infotitle :else :strong :original :type :center-node :prop-filters :on-click :div :link :id :tabid :current-node :br :href :a :text :span}, :order [:center-node :else :current-node :tabid :original :span :br :key :text :link :type :p#email-body :a :href :on-click :prop-filters :div :id :strong :div.infoitem :h3.infotitle]}, :doc nil}